{
    "appid": "deb82aa9-22cc-4675-9cf1-534b8d006eb7",
    "name": "Phantom",
    "description": "This App exposes various Phantom APIs as actions",
    "package_name": "phantom_phantom",
    "publisher": "Splunk",
    "type": "information",
    "main_module": "phantom_connector.py",
    "app_version": "3.6.2",
    "latest_tested_versions": [
        "Splunk Phantom PlatformAPI v5.3.1",
        "SOAR On-prem v5.3.1.84890",
        "SOAR Cloud v5.3.1.84890"
    ],
    "python_version": "3",
    "utctime_updated": "2022-01-13T00:26:58.000000Z",
    "product_vendor": "Phantom",
    "product_name": "Phantom",
    "product_version_regex": ".*",
    "min_phantom_version": "5.2.0",
    "fips_compliant": true,
    "license": "Copyright (c) 2016-2024 Splunk Inc.",
    "logo": "logo_splunk.svg",
    "contributors": [
        {
            "name": "import-au"
        }
    ],
    "logo_dark": "logo_splunk_dark.svg",
    "test_metadata": {
        "playbook_names": [
            "phantom_phantom"
        ]
    },
    "configuration": {
        "phantom_server": {
            "data_type": "string",
            "order": 0,
            "description": "Phantom IP or Hostname (e.g. 10.1.1.10 or valid_phantom_hostname)",
            "required": true
        },
        "auth_token": {
            "data_type": "password",
            "order": 1,
            "description": "Phantom Auth token"
        },
        "username": {
            "data_type": "string",
            "order": 2,
            "description": "Username (for HTTP basic auth)"
        },
        "password": {
            "data_type": "password",
            "order": 3,
            "description": "Password (for HTTP basic auth)"
        },
        "verify_certificate": {
            "data_type": "boolean",
            "order": 4,
            "description": "Verify HTTPS certificate (default: false)",
            "default": false
        },
        "deflate_item_extensions": {
            "data_type": "string",
            "order": 5,
            "description": "Only files with the specified extensions (comma-separated) will be deflated. If blank, file extension will not be checked"
        }
    },
    "actions": [
        {
            "action": "test connectivity",
            "description": "Validate the asset configuration for connectivity",
            "type": "test",
            "identifier": "test_asset_connectivity",
            "read_only": true,
            "parameters": {},
            "output": [],
            "versions": "EQ(*)"
        },
        {
            "action": "update artifact",
            "description": "Update or overwrite Phantom artifact with the provided input",
            "verbose": "<h4>Overwrite</h4>By default, this action will append or update these fields: \"cef_json\", \"cef_types_json\", and \"tags\", unless \"overwrite\" is enabled. In which case, those parameters will replace the entirety of current versions of what that artifact contains.<h4>Optional Fields</h4>While all are not required, for the action to run, at least one of the following optional parameters need to be provided:<table><thead><tr><th>PARAMETER</th><th>EXAMPLE</th></tr></thead><tbody><tr><td>name</td><td>Artifact Name</td></tr><tr><td>label</td><td>artifact_label</td></tr><tr><td>severity</td><td>high</td></tr><tr><td>cef_json</td><td>{\"key1\": \"value1\", \"goodDomain\": \"www.splunk.com\", \"remove_me\": \"\"}</td></tr><tr><td>cef_types_json</td><td>{\"goodDomain\": [\"domain\"]}</td></tr><tr><td>tags</td><td>tag1, tag3 <i>or</i> [\"tag2\", \"tag4\"]</td></tr><tr><td>artifact_json</td><td>{\"source_data_identifier\": \"myTicket1234\", \"label\": \"new_label\"}</td></tr></tbody></table><h4>Artifact JSON</h4>Artifact JSON should be used for more advanced aspects of Phantom artifacts. See Phantom REST API docs, specifically regarding artifacts.",
            "type": "generic",
            "identifier": "update_artifact",
            "read_only": false,
            "parameters": {
                "artifact_id": {
                    "description": "ID of artifact to update",
                    "data_type": "string",
                    "order": 0,
                    "required": true,
                    "contains": [
                        "phantom artifact id"
                    ],
                    "primary": true
                },
                "name": {
                    "description": "Artifact name (Always overwrites, if provided)",
                    "data_type": "string",
                    "order": 1
                },
                "label": {
                    "description": "Artifact label (Always overwrites, if provided)",
                    "data_type": "string",
                    "order": 2
                },
                "severity": {
                    "description": "Artifact severity (Always overwrites, if provided)",
                    "data_type": "string",
                    "order": 3
                },
                "cef_json": {
                    "description": "JSON format of the CEF fields you want in the artifact",
                    "data_type": "string",
                    "order": 4
                },
                "cef_types_json": {
                    "description": "JSON format of the CEF types (e.g., {'myIP': ['ip', 'ipv6']})",
                    "data_type": "string",
                    "order": 5
                },
                "tags": {
                    "description": "Comma-separated list of tags to add or replace in the artifact",
                    "data_type": "string",
                    "order": 6,
                    "allow_list": true
                },
                "overwrite": {
                    "description": "Overwrite artifacts with provided input (applies to: cef_json, contains_json, tags)",
                    "data_type": "boolean",
                    "order": 7
                },
                "artifact_json": {
                    "description": "JSON format of entire artifact (Always overwrites provided keys)",
                    "data_type": "string",
                    "order": 8
                }
            },
            "render": {
                "type": "table",
                "width": 10,
                "height": 5,
                "title": "Update Artifact"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.artifact_id",
                    "data_type": "string",
                    "contains": [
                        "phantom artifact id"
                    ],
                    "example_values": [
                        "2388"
                    ],
                    "column_name": "Artifact ID",
                    "column_order": 0
                },
                {
                    "data_path": "action_result.parameter.artifact_json",
                    "data_type": "string",
                    "example_values": [
                        "{\"severity\": \"high\", \"label\": \"test label\", \"description\": \"Artifact added by Me\", \"source_data_identifier\": \"my_custom_sdi\"}"
                    ]
                },
                {
                    "data_path": "action_result.parameter.cef_json",
                    "data_type": "string",
                    "example_values": [
                        "{\"new_field\": \"new_value\", \"deleted_field\": \"\"}"
                    ]
                },
                {
                    "data_path": "action_result.parameter.cef_types_json",
                    "data_type": "string",
                    "example_values": [
                        "{\"new_field\": [\"new contains\"]}"
                    ]
                },
                {
                    "data_path": "action_result.parameter.label",
                    "data_type": "string",
                    "example_values": [
                        "test label"
                    ]
                },
                {
                    "data_path": "action_result.parameter.name",
                    "data_type": "string",
                    "example_values": [
                        "New Name"
                    ]
                },
                {
                    "data_path": "action_result.parameter.overwrite",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.parameter.severity",
                    "data_type": "string",
                    "example_values": [
                        "high"
                    ]
                },
                {
                    "data_path": "action_result.parameter.tags",
                    "data_type": "string",
                    "example_values": [
                        "[\"tag2\"]"
                    ]
                },
                {
                    "data_path": "action_result.data.*.requested_artifact.cef.deleted_field",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.requested_artifact.cef.new_field",
                    "data_type": "string",
                    "example_values": [
                        "new_value"
                    ]
                },
                {
                    "data_path": "action_result.data.*.requested_artifact.cef.test",
                    "data_type": "string",
                    "example_values": [
                        "fff"
                    ]
                },
                {
                    "data_path": "action_result.data.*.requested_artifact.cef_types.new_field",
                    "data_type": "string",
                    "example_values": [
                        "new contains"
                    ]
                },
                {
                    "data_path": "action_result.data.*.requested_artifact.description",
                    "data_type": "string",
                    "example_values": [
                        "Artifact added by Me"
                    ]
                },
                {
                    "data_path": "action_result.data.*.requested_artifact.label",
                    "data_type": "string",
                    "example_values": [
                        "test label"
                    ]
                },
                {
                    "data_path": "action_result.data.*.requested_artifact.name",
                    "data_type": "string",
                    "example_values": [
                        "New Name"
                    ]
                },
                {
                    "data_path": "action_result.data.*.requested_artifact.severity",
                    "data_type": "string",
                    "example_values": [
                        "high"
                    ]
                },
                {
                    "data_path": "action_result.data.*.requested_artifact.source_data_identifier",
                    "data_type": "string",
                    "example_values": [
                        "my_custom_sdi"
                    ]
                },
                {
                    "data_path": "action_result.data.*.requested_artifact.tags",
                    "data_type": "string",
                    "example_values": [
                        "tag2"
                    ]
                },
                {
                    "data_path": "action_result.data.*.response.id",
                    "data_type": "numeric",
                    "example_values": [
                        2388
                    ]
                },
                {
                    "data_path": "action_result.data.*.response.success",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ],
                    "column_name": "Success",
                    "column_order": 1
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Artifact updated successfully."
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "add note",
            "description": "Add a note to a container",
            "verbose": "If the <b>container_id</b> parameter is left empty, then it will be initialized to the current container's id (from where the action is being run) and the status will be reflected accordingly. If the container is a case, a <b>phase_id</b> parameter can be provided to associate the note to a particular phase.",
            "type": "generic",
            "identifier": "add_note",
            "read_only": false,
            "parameters": {
                "title": {
                    "description": "Title for the note",
                    "data_type": "string",
                    "order": 0,
                    "required": true
                },
                "content": {
                    "description": "Note content",
                    "data_type": "string",
                    "order": 1
                },
                "container_id": {
                    "description": "The container id (defaults to current container)",
                    "data_type": "numeric",
                    "order": 2,
                    "contains": [
                        "phantom container id"
                    ],
                    "primary": true
                },
                "phase_id": {
                    "description": "Phase the note will be associated with",
                    "data_type": "string",
                    "order": 3
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.container_id",
                    "data_type": "numeric",
                    "example_values": [
                        35
                    ],
                    "contains": [
                        "phantom container id"
                    ]
                },
                {
                    "data_path": "action_result.parameter.content",
                    "data_type": "string",
                    "example_values": [
                        "Adding a note via app action"
                    ]
                },
                {
                    "data_path": "action_result.parameter.phase_id",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.title",
                    "data_type": "string",
                    "example_values": [
                        "Note test",
                        "Testing note"
                    ]
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Note created"
                    ],
                    "column_name": "Status",
                    "column_order": 0
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "render": {
                "type": "table"
            },
            "versions": "EQ(*)"
        },
        {
            "action": "update artifact tags",
            "description": "Add/Remove tags from an artifact",
            "type": "generic",
            "identifier": "tag_artifact",
            "read_only": false,
            "parameters": {
                "artifact_id": {
                    "description": "The artifact id",
                    "data_type": "string",
                    "order": 0,
                    "required": true,
                    "contains": [
                        "phantom artifact id"
                    ],
                    "primary": true
                },
                "add_tags": {
                    "description": "Comma-separated list of tags to add to the artifact",
                    "data_type": "string",
                    "order": 1,
                    "allow_list": true
                },
                "remove_tags": {
                    "description": "Comma-separated list of tags to remove from the artifact",
                    "data_type": "string",
                    "order": 2,
                    "allow_list": true
                }
            },
            "render": {
                "type": "table"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.add_tags",
                    "data_type": "string",
                    "example_values": [
                        "tag1, tag3"
                    ]
                },
                {
                    "data_path": "action_result.parameter.artifact_id",
                    "data_type": "string",
                    "example_values": [
                        "94"
                    ],
                    "contains": [
                        "phantom artifact id"
                    ]
                },
                {
                    "data_path": "action_result.parameter.remove_tags",
                    "data_type": "string",
                    "example_values": [
                        "tag2, tag4"
                    ]
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.tags_added",
                    "data_type": "string",
                    "example_values": [
                        "tag1"
                    ]
                },
                {
                    "data_path": "action_result.summary.tags_already_absent",
                    "data_type": "string",
                    "example_values": [
                        "tag4"
                    ]
                },
                {
                    "data_path": "action_result.summary.tags_already_present",
                    "data_type": "string",
                    "example_values": [
                        "tag3"
                    ]
                },
                {
                    "data_path": "action_result.summary.tags_removed",
                    "data_type": "string",
                    "example_values": [
                        "tag2"
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Tags added: tag1, Tags removed: tag2, Tags already present: tag3, Tags already absent: tag4"
                    ],
                    "column_name": "Status",
                    "column_order": 0
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "find artifacts",
            "description": "Find artifacts containing a CEF value",
            "verbose": "If the <b>limit_search</b> parameter is set to true, then the action will search the required artifact in the provided <b>container_ids</b> only. Otherwise, the <b>container_ids</b> parameter will be ignored.<br><br>If any non-integer value is provided in the <b>container_ids</b> parameter, then all the non-integer values will be removed and the parameter will be updated accordingly. If the value of the <b>container_ids</b> parameter is <b>current</b>, then it will be replaced by the current container's id(from which the action is being run) and the status will be reflected accordingly.<br><br>If the <b>exact_match</b> parameter is set to false, then the action will return all those artifacts for which the <b>values</b> parameter is a substring of any one of its cef values. Otherwise it will return those artifacts for which any one of its cef value matches exactly with the <b>values</b> parameter.<br><br>For the <b>values</b> of type integer, float or string, it is suggested to set the <b>exact_match</b> parameter to false.",
            "type": "investigate",
            "identifier": "find_artifacts",
            "read_only": true,
            "parameters": {
                "cef_key": {
                    "description": "Key of the cef dict you are querying: act, app, applicationProtocol, baseEventCount, bytesIn, etc. It will search the entire cef dictionary if blank",
                    "data_type": "string",
                    "order": 0
                },
                "values": {
                    "description": "Find this value in artifacts",
                    "data_type": "string",
                    "order": 1,
                    "required": true,
                    "contains": [
                        "*"
                    ],
                    "primary": true
                },
                "exact_match": {
                    "description": "Exact match (default: true)",
                    "data_type": "boolean",
                    "order": 2,
                    "default": true
                },
                "limit_search": {
                    "description": "Limit search to specified containers (default: false)",
                    "data_type": "boolean",
                    "order": 3,
                    "default": false
                },
                "container_ids": {
                    "description": "List of space or comma separated container ids. the word \"current\" will be replaced by the current container id",
                    "data_type": "string",
                    "order": 4,
                    "default": "current"
                }
            },
            "render": {
                "type": "custom",
                "width": 10,
                "height": 5,
                "view": "phantom_views.find_artifacts",
                "title": "FIND ARTIFACTS"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.cef_key",
                    "data_type": "string",
                    "example_values": [
                        "act",
                        "app",
                        "applicationProtocol"
                    ]
                },
                {
                    "data_path": "action_result.parameter.container_ids",
                    "data_type": "string",
                    "example_values": [
                        "current"
                    ]
                },
                {
                    "data_path": "action_result.parameter.exact_match",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.parameter.limit_search",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.parameter.values",
                    "data_type": "string",
                    "contains": [
                        "*"
                    ],
                    "example_values": [
                        "test_value"
                    ]
                },
                {
                    "data_path": "action_result.data.*.container",
                    "data_type": "numeric",
                    "example_values": [
                        1234
                    ]
                },
                {
                    "data_path": "action_result.data.*.container_name",
                    "data_type": "string",
                    "example_values": [
                        "phantom_test"
                    ]
                },
                {
                    "data_path": "action_result.data.*.found in",
                    "data_type": "string",
                    "example_values": [
                        "test_key"
                    ]
                },
                {
                    "data_path": "action_result.data.*.id",
                    "data_type": "numeric",
                    "example_values": [
                        12345
                    ]
                },
                {
                    "data_path": "action_result.data.*.matched",
                    "data_type": "string",
                    "example_values": [
                        "test_value"
                    ]
                },
                {
                    "data_path": "action_result.data.*.name",
                    "data_type": "string",
                    "example_values": [
                        "Artifact_demo"
                    ]
                },
                {
                    "data_path": "action_result.summary.artifacts_found",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "action_result.summary.server",
                    "data_type": "string",
                    "example_values": [
                        "https://10.1.1.10"
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Artifacts found: 1, Server: https://10.1.1.10"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "add listitem",
            "description": "Add value to a custom list",
            "verbose": "To add a row containing a single value to a list simply pass the value. However, to pass multiple values in a row, format it like a JSON array (e.g. [\"item1\", \"item2\", \"item3\"]).<br><br>The action will update the <b>list</b>, if the <b>list</b> already exists (even if the <b>create</b> parameter is set to true).<br><br>After creating or updating a list through this action, if the same list is updated from the UI, then the user needs to save those changes before updating the list through this action again, otherwise, the changes made from the UI will be overridden.",
            "type": "generic",
            "identifier": "add_listitem",
            "read_only": false,
            "parameters": {
                "list": {
                    "description": "Name or ID of a custom list",
                    "data_type": "string",
                    "order": 0,
                    "required": true
                },
                "new_row": {
                    "description": "New Row (string or JSON list)",
                    "data_type": "string",
                    "order": 1,
                    "required": true,
                    "primary": true,
                    "contains": [
                        "*"
                    ]
                },
                "create": {
                    "description": "Create list if it does not exist (default: false)",
                    "data_type": "boolean",
                    "order": 2,
                    "default": false
                }
            },
            "render": {
                "type": "table"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "column_order": 0,
                    "column_name": "Status",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.create",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.parameter.list",
                    "data_type": "string",
                    "example_values": [
                        "demo_list"
                    ]
                },
                {
                    "data_path": "action_result.parameter.new_row",
                    "data_type": "string",
                    "contains": [
                        "*"
                    ],
                    "example_values": [
                        "[\"value1\",\"value2\",\"value3\"]"
                    ]
                },
                {
                    "data_path": "action_result.data.*.failed",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.data.*.success",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.summary.server",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ],
                    "example_values": [
                        "https://10.1.1.10"
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Server: https://10.1.1.10"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "find listitem",
            "description": "Find value in a custom list",
            "verbose": "Row and column coordinates for each matching value can be found in the result summary under \"locations\". The match is case sensitive.<br><br>If the <b>exact_match</b> parameter is set to false, then the action will return all those strings for which the <b>values</b> parameter is its substring. Otherwise it will return those strings which match exactly with the <b>values</b> parameter.",
            "type": "investigate",
            "identifier": "find_listitem",
            "read_only": true,
            "parameters": {
                "list": {
                    "description": "Name or ID of a custom list",
                    "data_type": "string",
                    "order": 0,
                    "required": true
                },
                "column_index": {
                    "description": "Search in column number (0 based)",
                    "data_type": "numeric",
                    "order": 1
                },
                "values": {
                    "description": "Value to search for",
                    "data_type": "string",
                    "order": 2,
                    "required": true,
                    "primary": true,
                    "contains": [
                        "*"
                    ]
                },
                "exact_match": {
                    "description": "Exact match (default: true)",
                    "data_type": "boolean",
                    "order": 3,
                    "default": true
                }
            },
            "render": {
                "type": "custom",
                "width": 10,
                "height": 5,
                "view": "phantom_views.find_listitem",
                "title": "FIND ARTIFACTS"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.column_index",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.parameter.exact_match",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.parameter.list",
                    "data_type": "string",
                    "example_values": [
                        "list_demo"
                    ]
                },
                {
                    "data_path": "action_result.parameter.values",
                    "data_type": "string",
                    "contains": [
                        "*"
                    ],
                    "example_values": [
                        "value1"
                    ]
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.found_matches",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "action_result.summary.list_id",
                    "data_type": "numeric",
                    "example_values": [
                        18
                    ]
                },
                {
                    "data_path": "action_result.summary.locations",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.summary.locations.*",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.summary.server",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ],
                    "example_values": [
                        "https://10.1.1.10"
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Server: https://10.1.1.10, Found matches: 1, Locations: [(1, 0)], List id: 18"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "add artifact",
            "description": "Add a new artifact to a container",
            "verbose": "If the <b>container_id</b> parameter is left empty, then it will be initialized to the current container's id (from which the action is being run) and the status will be reflected accordingly.<br><br>CEF fields can be added to the artifact in two ways, either by using the <b>cef_name</b> and <b>cef_value</b> parameter or by using the <b>cef_dictionary</b> parameter. If the <b>cef_name</b>, <b>cef_value</b>, and <b>cef_dictionary</b> parameters are all included, the action will add the <b>cef_name</b> field to the <b>cef_dictionary</b>.<br><br>Using only the <b>cef_name</b> and <b>cef_value</b> parameter will result in the artifact having one CEF field.<br><br>The <b>cef_dictionary</b> parameter takes a JSON dictionary with key-value pairs representing CEF key-value pairs. To provide values containing double-quotes(\"), add a backslash(\\) before the double-quotes.<br>For e.g., {\"X-Universally-Unique-Identifier\":\"test\",\"Content-Type\":\"multipart/alternative; boundary=<b>\\\"</b>Apple-Mail=_0DA95D7E-B791-4751-8043-175949088A2C<b>\\\"</b>>\",\"Message-Id\":\"<abc@xyz.com>\"}<br><br>The <b>contains</b> parameter can take a JSON dictionary, with the keys matching the keys of the <b>cef_dictionary</b> and the values being lists of possible contains for the CEF field. If a given value in the <b>cef_dictionary</b> is not present in the <b>contains</b> dictionary, the action will first check the list of default CEF fields. If not a default CEF field, then the action will attempt to identify the appropriate value for contains.<br>The <b>contains</b> parameter can also take a string(or a comma-separated list of strings) representing the contains for the <b>cef_value</b> parameter. This method should be used only if the <b>cef_name</b> and <b>cef_value</b> parameters are used.<br><br>If the <b>run_automation</b> parameter is set to true then the active playbooks will run automatically after the artifact is added. The active playbooks will run on the same container in which the artifact is added.<br><br>See the <a href=\"https://docs.splunk.com/Documentation/Phantom/4.8/PlatformAPI/RESTArtifacts\" target=\"_blank\">REST API Documentation</a> for more information on artifacts, CEF fields, and contains.",
            "type": "generic",
            "identifier": "add_artifact",
            "read_only": false,
            "parameters": {
                "name": {
                    "description": "Name of the new artifact",
                    "data_type": "string",
                    "order": 0,
                    "default": "User created artifact"
                },
                "container_id": {
                    "description": "Numeric container ID for the new artifact",
                    "data_type": "numeric",
                    "order": 1,
                    "contains": [
                        "phantom container id"
                    ],
                    "primary": true
                },
                "label": {
                    "description": "Artifact label (default: event)",
                    "data_type": "string",
                    "order": 2,
                    "default": "event"
                },
                "source_data_identifier": {
                    "description": "Source Data Idenitifier",
                    "data_type": "string",
                    "order": 3,
                    "required": true
                },
                "cef_name": {
                    "description": "CEF Name",
                    "data_type": "string",
                    "order": 4,
                    "value_list": [
                        "",
                        "act",
                        "app",
                        "applicationProtocol",
                        "baseEventCount",
                        "bytesIn",
                        "bytesOut",
                        "cat",
                        "cn1",
                        "cn1Label",
                        "cn2",
                        "cn2Label",
                        "cn3",
                        "cn3Label",
                        "cnt",
                        "cs1",
                        "cs1Label",
                        "cs2",
                        "cs2Label",
                        "cs3",
                        "cs3Label",
                        "cs4",
                        "cs4Label",
                        "cs5",
                        "cs5Label",
                        "cs6",
                        "cs6Label",
                        "destinationAddress",
                        "destinationDnsDomain",
                        "destinationHostName",
                        "destinationMacAddress",
                        "destinationNtDomain",
                        "destinationPort",
                        "destinationProcessName",
                        "destinationServiceName",
                        "destinationTranslatedAddress",
                        "destinationTranslatedPort",
                        "destinationUserId",
                        "destinationUserName",
                        "destinationUserPrivileges",
                        "deviceAction",
                        "deviceAddress",
                        "deviceCustomDate1",
                        "deviceCustomDate1Label",
                        "deviceCustomDate2",
                        "deviceCustomDate2Label",
                        "deviceCustomNumber1",
                        "deviceCustomNumber1Label",
                        "deviceCustomNumber2",
                        "deviceCustomNumber2Label",
                        "deviceCustomNumber3",
                        "deviceCustomNumber3Label",
                        "deviceCustomString1",
                        "deviceCustomString1Label",
                        "deviceCustomString2",
                        "deviceCustomString2Label",
                        "deviceCustomString3",
                        "deviceCustomString3Label",
                        "deviceCustomString4",
                        "deviceCustomString4Label",
                        "deviceCustomString5",
                        "deviceCustomString5Label",
                        "deviceCustomString6",
                        "deviceCustomString6Label",
                        "deviceDirection",
                        "deviceDnsDomain",
                        "deviceEventCategory",
                        "deviceExternalId",
                        "deviceFacility",
                        "deviceHostname",
                        "deviceInboundInterface",
                        "deviceMacAddress",
                        "deviceOutboundInterface",
                        "deviceProcessName",
                        "deviceTranslatedAddress",
                        "dhost",
                        "dmac",
                        "dntdom",
                        "dpriv",
                        "dproc",
                        "dpt",
                        "dst",
                        "duid",
                        "duser",
                        "dvc",
                        "dvchost",
                        "end",
                        "endTime",
                        "eventOutcome",
                        "externalId",
                        "fileCreateTime",
                        "fileHash",
                        "fileHashMd5",
                        "fileHashSha1",
                        "fileHashSha256",
                        "fileHashSha512",
                        "fileId",
                        "fileModificationTime",
                        "fileName",
                        "filePath",
                        "filePermission",
                        "fileSize",
                        "fileType",
                        "fname",
                        "fsize",
                        "in",
                        "message",
                        "msg",
                        "oldfileCreateTime",
                        "oldfileHash",
                        "oldfileId",
                        "oldfileModificationTime",
                        "oldfileName",
                        "oldfilePath",
                        "oldfilePermission",
                        "oldfileType",
                        "oldfsize",
                        "out",
                        "outcome",
                        "proto",
                        "receiptTime",
                        "request",
                        "requestClientApplication",
                        "requestCookies",
                        "requestMethod",
                        "requestURL",
                        "rt",
                        "shost",
                        "smac",
                        "sntdom",
                        "sourceAddress",
                        "sourceDnsDomain",
                        "sourceHostName",
                        "sourceMacAddress",
                        "sourceNtDomain",
                        "sourcePort",
                        "sourceServiceName",
                        "sourceTranslatedAddress",
                        "sourceTranslatedPort",
                        "sourceUserId",
                        "sourceUserName",
                        "sourceUserPrivileges",
                        "spriv",
                        "spt",
                        "src",
                        "start",
                        "startTime",
                        "suid",
                        "suser",
                        "transportProtocol"
                    ]
                },
                "cef_value": {
                    "description": "Value",
                    "data_type": "string",
                    "order": 5,
                    "primary": true,
                    "contains": [
                        "*"
                    ]
                },
                "cef_dictionary": {
                    "description": "CEF JSON",
                    "data_type": "string",
                    "order": 6
                },
                "contains": {
                    "description": "Data type for each CEF field",
                    "data_type": "string",
                    "order": 7
                },
                "run_automation": {
                    "description": "Run automation on newly created artifact(s) (default: false)",
                    "data_type": "boolean",
                    "default": false,
                    "order": 8
                }
            },
            "render": {
                "type": "custom",
                "width": 10,
                "height": 5,
                "view": "phantom_views.add_artifact",
                "title": "ADD ARTIFACT"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.cef_dictionary",
                    "data_type": "string",
                    "example_values": [
                        "{\"test_key\": \"test_value\"}"
                    ]
                },
                {
                    "data_path": "action_result.parameter.cef_name",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.cef_value",
                    "data_type": "string",
                    "contains": [
                        "*"
                    ]
                },
                {
                    "data_path": "action_result.parameter.container_id",
                    "data_type": "numeric",
                    "contains": [
                        "phantom container id"
                    ],
                    "example_values": [
                        1234
                    ]
                },
                {
                    "data_path": "action_result.parameter.contains",
                    "data_type": "string",
                    "example_values": [
                        "domain"
                    ]
                },
                {
                    "data_path": "action_result.parameter.label",
                    "data_type": "string",
                    "example_values": [
                        "event"
                    ]
                },
                {
                    "data_path": "action_result.parameter.name",
                    "data_type": "string",
                    "example_values": [
                        "Artifact_demo"
                    ]
                },
                {
                    "data_path": "action_result.parameter.run_automation",
                    "data_type": "string",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.parameter.source_data_identifier",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.existing_artifact_id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.failed",
                    "data_type": "boolean"
                },
                {
                    "data_path": "action_result.data.*.id",
                    "data_type": "numeric",
                    "example_values": [
                        123
                    ]
                },
                {
                    "data_path": "action_result.data.*.success",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.summary.artifact_id",
                    "data_type": "numeric",
                    "example_values": [
                        12345
                    ]
                },
                {
                    "data_path": "action_result.summary.container_id",
                    "data_type": "numeric",
                    "example_values": [
                        1234
                    ]
                },
                {
                    "data_path": "action_result.summary.server",
                    "data_type": "string",
                    "contains": [
                        "url"
                    ],
                    "example_values": [
                        "https://10.1.1.10"
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Artifact id: 12345, Container id: 1234, Server: https://10.1.1.10"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "deflate item",
            "description": "Deflates an item from the vault",
            "verbose": "The action will be supported only if the <b>phantom_server</b> parameter (in the asset configurations) is configured to the local Phantom instance, i.e., the instance from which the action is being run.<br><br>The action detects if the input vault item is a compressed file and deflates it. Every file found after deflation is then added to the vault. If <b>container_id</b> is specified will add to its vault, else to the current (the container whose context the action is executed) container. The action supports <b>zip</b>, <b>gzip</b>, <b>bz2</b>, <b>tar</b>, and <b>tgz</b> file types. In the case where the compressed file contains another compressed file in it, set the <b>recursive</b> parameter to true to deflate the inner compressed file.<br><br>If recursion is enabled and a password is specified, the application will use the password for given zip file only. The inner zip file will be extracted only if the file is not password protected. Among the different compression methods, only the zip supports password protection functionality.<br><br>For certain Unicode characters, the file name is not unzipped as it is, by the zipfile module.",
            "type": "generic",
            "identifier": "deflate_item",
            "read_only": false,
            "parameters": {
                "vault_id": {
                    "description": "Vault ID",
                    "data_type": "string",
                    "order": 0,
                    "contains": [
                        "sha1",
                        "vault id"
                    ],
                    "required": true,
                    "primary": true
                },
                "container_id": {
                    "description": "Destination container id",
                    "data_type": "numeric",
                    "order": 1,
                    "contains": [
                        "phantom container id"
                    ],
                    "primary": true
                },
                "password": {
                    "description": "Password for the file",
                    "data_type": "string",
                    "order": 2
                },
                "recursive": {
                    "description": "Extract recursively  (default: false)",
                    "data_type": "boolean",
                    "order": 3,
                    "default": false
                }
            },
            "render": {
                "type": "table",
                "width": 10,
                "height": 5,
                "title": "Deflate Item"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.container_id",
                    "data_type": "numeric",
                    "contains": [
                        "phantom container id"
                    ],
                    "example_values": [
                        3
                    ]
                },
                {
                    "data_path": "action_result.parameter.password",
                    "data_type": "string",
                    "example_values": [
                        "P@$$w0rd"
                    ]
                },
                {
                    "data_path": "action_result.parameter.recursive",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.parameter.vault_id",
                    "data_type": "string",
                    "contains": [
                        "sha1",
                        "vault id"
                    ],
                    "example_values": [
                        "f582ed9120fa3be94852c73e1cd188f2948f677f"
                    ]
                },
                {
                    "data_path": "action_result.data.*.aka.*",
                    "data_type": "string",
                    "example_values": [
                        "test.txt"
                    ]
                },
                {
                    "data_path": "action_result.data.*.container",
                    "data_type": "string",
                    "example_values": [
                        "phantom_test"
                    ]
                },
                {
                    "data_path": "action_result.data.*.container_id",
                    "data_type": "numeric",
                    "contains": [
                        "phantom container id"
                    ],
                    "example_values": [
                        1234
                    ]
                },
                {
                    "data_path": "action_result.data.*.contains.*",
                    "data_type": "string",
                    "example_values": [
                        "vault id"
                    ]
                },
                {
                    "data_path": "action_result.data.*.create_time",
                    "data_type": "string",
                    "example_values": [
                        "0 minutes ago"
                    ]
                },
                {
                    "data_path": "action_result.data.*.created_via",
                    "data_type": "string",
                    "example_values": [
                        "automation"
                    ]
                },
                {
                    "data_path": "action_result.data.*.hash",
                    "data_type": "string",
                    "contains": [
                        "sha1"
                    ],
                    "example_values": [
                        "0a0e6c7ab7f77d058efd444279b81c4c6a9cf4ce"
                    ]
                },
                {
                    "data_path": "action_result.data.*.id",
                    "data_type": "numeric",
                    "example_values": [
                        12
                    ]
                },
                {
                    "data_path": "action_result.data.*.metadata.contains",
                    "data_type": "string",
                    "example_values": [
                        "vault id"
                    ]
                },
                {
                    "data_path": "action_result.data.*.metadata.md5",
                    "data_type": "string",
                    "contains": [
                        "md5"
                    ],
                    "column_name": "MD5",
                    "column_order": 3,
                    "example_values": [
                        "0db33a0790b6d6d5c2e4425646eee7fc"
                    ]
                },
                {
                    "data_path": "action_result.data.*.metadata.sha1",
                    "data_type": "string",
                    "contains": [
                        "sha1"
                    ],
                    "example_values": [
                        "fece6c7ab7f77d058efd444279b81c4c6a9cf4ce"
                    ]
                },
                {
                    "data_path": "action_result.data.*.metadata.sha256",
                    "data_type": "string",
                    "contains": [
                        "sha256"
                    ],
                    "column_name": "SHA256",
                    "column_order": 4,
                    "example_values": [
                        "4f2155212cb0f74207bd0e4fd5ecae548ee2bae1d2dcd36c1d0ba0b6254bd4a1"
                    ]
                },
                {
                    "data_path": "action_result.data.*.metadata.size",
                    "data_type": "numeric",
                    "example_values": [
                        33
                    ]
                },
                {
                    "data_path": "action_result.data.*.mime_type",
                    "data_type": "string",
                    "example_values": [
                        "text/plain"
                    ]
                },
                {
                    "data_path": "action_result.data.*.name",
                    "data_type": "string",
                    "column_name": "Name",
                    "column_order": 0,
                    "example_values": [
                        "tgz-test"
                    ]
                },
                {
                    "data_path": "action_result.data.*.path",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.size",
                    "data_type": "numeric",
                    "column_name": "Size",
                    "column_order": 2,
                    "example_values": [
                        10240
                    ]
                },
                {
                    "data_path": "action_result.data.*.task",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.user",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.vault_document",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.vault_id",
                    "data_type": "string",
                    "contains": [
                        "sha1",
                        "vault id"
                    ],
                    "column_name": "Vault ID",
                    "column_order": 1,
                    "example_values": [
                        "b90e6c7ab7f77d058efd444279b81c4c6a9cf4ce"
                    ]
                },
                {
                    "data_path": "action_result.summary.total_vault_items",
                    "data_type": "numeric",
                    "example_values": [
                        9
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Total vault items: 9"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "export container",
            "description": "Export local container to the configured Phantom asset",
            "verbose": "This action exports a container (that matches the <b>container_id</b>) from the local Phantom instance (the instance from where the action is being run) to the configured Phantom asset (that the action is being executed on).<br><br>The action will fail with an error message like <b>severity instance with name u'critical' does not exist</b>, if the container metadata on the local phantom instance and the configured Phantom asset does not match.<br><br>Set the <b>keep_owner</b> parameter to true if you want the owner of the container on the configured Phantom instance to match the owner on the local instance. Note that this will be based on Owner ID, not Owner Name.",
            "type": "generic",
            "identifier": "export_container",
            "read_only": false,
            "parameters": {
                "container_id": {
                    "description": "Container ID to copy",
                    "contains": [
                        "phantom container id"
                    ],
                    "order": 0,
                    "data_type": "numeric",
                    "required": true,
                    "primary": true
                },
                "keep_owner": {
                    "description": "Keep Owner",
                    "data_type": "boolean",
                    "default": false,
                    "order": 1
                },
                "label": {
                    "description": "Label to name the export container. If blank, the export container will have the same name as the local container",
                    "order": 2,
                    "data_type": "string"
                },
                "run_automation": {
                    "description": "Run active playbooks",
                    "order": 3,
                    "data_type": "boolean"
                }
            },
            "render": {
                "type": "table"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ],
                    "column_order": 0,
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.container_id",
                    "data_type": "numeric",
                    "example_values": [
                        3
                    ],
                    "contains": [
                        "phantom container id"
                    ]
                },
                {
                    "data_path": "action_result.parameter.keep_owner",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.parameter.label",
                    "data_type": "string",
                    "example_values": [
                        "events"
                    ]
                },
                {
                    "data_path": "action_result.parameter.run_automation",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.artifact_count",
                    "data_type": "numeric",
                    "example_values": [
                        268
                    ]
                },
                {
                    "data_path": "action_result.summary.container_id",
                    "data_type": "numeric",
                    "example_values": [
                        94
                    ],
                    "contains": [
                        "phantom container id"
                    ],
                    "column_order": 1,
                    "column_name": "New Container"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Container id: 94, Artifact count: 268"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "import container",
            "description": "Import a container from an external Phantom instance",
            "verbose": "This action imports a container (that matches the <b>container_id</b>) from the configured Phantom asset (that the action is being executed on) into the local Phantom instance (the instance from where the action is being run).<br><br>The action will fail with an error message like <b>severity instance with name u'critical' does not exist</b>, if the container metadata on the configured Phantom asset and the local phantom instance does not match.<br><br>Set the <b>keep_owner</b> parameter to true if you want the owner of the container on the local Phantom instance to match the owner on the configured instance. Note that this will be based on Owner ID, not Owner Name.",
            "type": "generic",
            "identifier": "import_container",
            "read_only": false,
            "parameters": {
                "container_id": {
                    "description": "Container ID to copy",
                    "contains": [
                        "phantom container id"
                    ],
                    "data_type": "numeric",
                    "required": true,
                    "primary": true,
                    "order": 0
                },
                "keep_owner": {
                    "description": "Keep Owner",
                    "data_type": "boolean",
                    "default": false,
                    "order": 1
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.container_id",
                    "data_type": "string",
                    "example_values": [
                        "3"
                    ],
                    "contains": [
                        "phantom container id"
                    ]
                },
                {
                    "data_path": "action_result.parameter.keep_owner",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.artifact_count",
                    "data_type": "numeric",
                    "example_values": [
                        268
                    ]
                },
                {
                    "data_path": "action_result.summary.container_id",
                    "data_type": "numeric",
                    "example_values": [
                        94
                    ],
                    "contains": [
                        "phantom container id"
                    ],
                    "column_order": 0,
                    "column_name": "New Container"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Container id: 94, Artifact count: 268"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)",
            "render": {
                "width": 12,
                "title": "Import Container",
                "type": "table",
                "height": 5
            }
        },
        {
            "action": "create container",
            "description": "Create a new container on a Phantom instance",
            "verbose": "This action creates a new container on the Phantom server, which is configured in the <b>phantom_server</b> asset parameter. The <b>container_json</b> parameter needs to be a JSON string. It is mandatory to provide a <b>label</b> key in the <b>container_json</b> parameter. The action will fail if the <b>container_json</b> has a label that does not exist on the destination Phantom asset.<br>E.g., {\"name\":\"Test Container\",\"label\":\"events\"}<br><br>The <b>container_artifacts</b> is an optional parameter that needs to be a list of artifact objects as a JSON string. Each artifact JSON object should contain the following keys: <b>cef, cef_types, data, description, end_time, ingest_app_id, kill_chain, label, name, owner_id, severity, source_data_identifier, start_time, tags, type</b>. All other keys will be ignored.<br>E.g., [{\"name\": \"artifact 1\", \"label\":\"label1\", \"cef\": {\"test\": \"123\"}},{\"name\": \"artifact 2\", \"label\":\"label2\", \"cef\": {\"test\": \"456\"}}]<br><br>See <a href=\"https://docs.splunk.com/Documentation/Phantom/4.8/PlatformAPI/RESTArtifacts\" target=\"_blank\"><b>Splunk Phantom Documentation</b></a> for further details.",
            "type": "generic",
            "identifier": "create_container",
            "read_only": false,
            "parameters": {
                "container_json": {
                    "description": "The container JSON object",
                    "order": 0,
                    "data_type": "string",
                    "required": true
                },
                "container_artifacts": {
                    "description": "List of artifact JSON objects",
                    "order": 1,
                    "data_type": "string"
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.container_artifacts",
                    "data_type": "string",
                    "example_values": [
                        "[{\"name\": \"A human friendly name for artifact (1)\", \"label\": \"event\", \"source_data_identifier\": 1},{\"name\": \"A human friendly name for artifact (2)\", \"label\": \"event\", \"source_data_identifier\": 2},{\"name\": \"A human friendly name for artifact (3)\", \"label\": \"event\", \"source_data_identifier\": 3}]"
                    ]
                },
                {
                    "data_path": "action_result.parameter.container_json",
                    "data_type": "string",
                    "example_values": [
                        "{\"severity\": \"medium\", \"label\": \"events\", \"version\": 1, \"asset\": 7, \"status\": \"new\", \"description\": \"New Container from Phantom Helper\", \"tags\": [],  \"data\": {}, \"name\": \"This is a container\"}"
                    ]
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.artifact_count",
                    "data_type": "numeric",
                    "example_values": [
                        3,
                        5
                    ]
                },
                {
                    "data_path": "action_result.summary.container_id",
                    "data_type": "numeric",
                    "example_values": [
                        82,
                        77
                    ],
                    "contains": [
                        "phantom container id"
                    ],
                    "column_order": 0,
                    "column_name": "New Container"
                },
                {
                    "data_path": "action_result.summary.failed_artifact_count",
                    "data_type": "numeric",
                    "example_values": [
                        7
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Container id: 82, Artifact count: 3"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)",
            "render": {
                "width": 12,
                "title": "Create Container",
                "type": "table",
                "height": 5
            }
        },
        {
            "action": "get action result",
            "description": "Find the results of a previously run action",
            "verbose": "This action returns the most recent results of the given <b>action_name</b> launched with the given <b>parameters</b> within the given <b>time_limit</b>.<br><br>The action will limit the number of results returned to the value in <b>max_results</b>. By default, the limit is 10. To get all the results, set the<b>max_results</b> parameter to 0.<br><br>The <b>parameters</b> parameter takes a JSON string in the format:<br><br><pre>{<br>    &quot;parameter_name1&quot;: &quot;parameter_value1&quot;<br>    &quot;parameter_name2&quot;: &quot;parameter_value2&quot;<br>    ...<br>}</pre><br>The <b>app</b> parameter takes an app name, and if it is included, the action will only search for action results from that app. Similarly, the <b>asset</b> parameter takes an asset name, and if it is included, the action will only search for action results from that asset.",
            "type": "investigate",
            "identifier": "get_action",
            "read_only": true,
            "parameters": {
                "action_name": {
                    "description": "Action name",
                    "data_type": "string",
                    "order": 0,
                    "required": true
                },
                "parameters": {
                    "description": "JSON string of action parameters",
                    "data_type": "string",
                    "order": 1
                },
                "app": {
                    "description": "App name",
                    "data_type": "string",
                    "order": 2
                },
                "asset": {
                    "description": "Asset name",
                    "data_type": "string",
                    "order": 3
                },
                "time_limit": {
                    "description": "Number of hours to search back",
                    "data_type": "numeric",
                    "order": 4
                },
                "max_results": {
                    "description": "Maximum number of action results to return",
                    "data_type": "numeric",
                    "default": 10,
                    "order": 5
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.action_name",
                    "data_type": "string",
                    "example_values": [
                        "blacklist ip"
                    ]
                },
                {
                    "data_path": "action_result.parameter.app",
                    "data_type": "string",
                    "example_values": [
                        "Phantom"
                    ]
                },
                {
                    "data_path": "action_result.parameter.asset",
                    "data_type": "string",
                    "example_values": [
                        "test_phantom"
                    ]
                },
                {
                    "data_path": "action_result.parameter.max_results",
                    "data_type": "numeric",
                    "example_values": [
                        5
                    ]
                },
                {
                    "data_path": "action_result.parameter.parameters",
                    "data_type": "string",
                    "example_values": [
                        "{\"ip\": \"1.8.9.0\"}"
                    ]
                },
                {
                    "data_path": "action_result.parameter.time_limit",
                    "data_type": "numeric",
                    "example_values": [
                        24
                    ]
                },
                {
                    "data_path": "action_result.data.*.action",
                    "data_type": "string",
                    "example_values": [
                        "blacklist ip"
                    ]
                },
                {
                    "data_path": "action_result.data.*.action_run",
                    "data_type": "numeric",
                    "example_values": [
                        2724
                    ]
                },
                {
                    "data_path": "action_result.data.*.app",
                    "data_type": "numeric",
                    "example_values": [
                        121
                    ]
                },
                {
                    "data_path": "action_result.data.*.app_name",
                    "data_type": "string",
                    "example_values": [
                        "Phantom"
                    ]
                },
                {
                    "data_path": "action_result.data.*.app_version",
                    "data_type": "string",
                    "example_values": [
                        "1.0.0"
                    ]
                },
                {
                    "data_path": "action_result.data.*.asset",
                    "data_type": "numeric",
                    "example_values": [
                        137
                    ]
                },
                {
                    "data_path": "action_result.data.*.container",
                    "data_type": "numeric",
                    "example_values": [
                        1154
                    ]
                },
                {
                    "data_path": "action_result.data.*.effective_user",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.end_time",
                    "data_type": "string",
                    "example_values": [
                        "2017-11-06T20:30:27.991000Z"
                    ]
                },
                {
                    "data_path": "action_result.data.*.exception_occured",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.data.*.extra_data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.id",
                    "data_type": "numeric",
                    "example_values": [
                        2761
                    ]
                },
                {
                    "data_path": "action_result.data.*.message",
                    "data_type": "string",
                    "example_values": [
                        "Successfully blacklisted IP"
                    ]
                },
                {
                    "data_path": "action_result.data.*.playbook_run",
                    "data_type": "numeric",
                    "example_values": [
                        1056
                    ]
                },
                {
                    "data_path": "action_result.data.*.result_data.*.data",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.data.*.result_data.*.message",
                    "data_type": "string",
                    "example_values": [
                        "IP blacklisted successfully"
                    ]
                },
                {
                    "data_path": "action_result.data.*.result_data.*.parameter",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.result_data.*.parameter.context.artifact_id",
                    "data_type": "numeric",
                    "example_values": [
                        0
                    ]
                },
                {
                    "data_path": "action_result.data.*.result_data.*.parameter.context.guid",
                    "data_type": "string",
                    "example_values": [
                        "293d0369-4801-417d-a1af-a73cf1200d3d"
                    ]
                },
                {
                    "data_path": "action_result.data.*.result_data.*.parameter.context.parent_action_run",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.result_data.*.status",
                    "data_type": "string",
                    "example_values": [
                        "success"
                    ]
                },
                {
                    "data_path": "action_result.data.*.result_data.*.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.data.*.result_summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "action_result.data.*.result_summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "action_result.data.*.start_time",
                    "data_type": "string",
                    "example_values": [
                        "2017-11-06T20:30:04.879000Z"
                    ]
                },
                {
                    "data_path": "action_result.data.*.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.data.*.version",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "action_result.summary.action_run_id",
                    "data_type": "numeric",
                    "example_values": [
                        2761
                    ]
                },
                {
                    "data_path": "action_result.summary.num_results",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Action run id: 2761"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)",
            "render": {
                "type": "json"
            }
        },
        {
            "action": "update list",
            "identifier": "update_list",
            "description": "Update a list",
            "verbose": "Either the <b>list_name</b> or </b>id</b> is required. If both, <b>list_name</b> and <b>id</b> parameters are provided and both of them point to different lists, then the <b>list_name</b> parameter will be preferred and the action will update the list specified in the list_name parameter.",
            "type": "generic",
            "read_only": false,
            "parameters": {
                "list_name": {
                    "description": "List name",
                    "data_type": "string",
                    "order": 0
                },
                "id": {
                    "description": "List id",
                    "data_type": "numeric",
                    "order": 1
                },
                "row_number": {
                    "description": "Row number in list to be modified",
                    "data_type": "numeric",
                    "order": 2,
                    "required": true
                },
                "row_values_as_list": {
                    "description": "JSON formatted list of new values for the row",
                    "data_type": "string",
                    "order": 3,
                    "required": true
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ],
                    "column_name": "Status",
                    "column_order": 0
                },
                {
                    "data_path": "action_result.parameter.id",
                    "data_type": "numeric"
                },
                {
                    "data_path": "action_result.parameter.list_name",
                    "data_type": "string",
                    "example_values": [
                        "my first list"
                    ]
                },
                {
                    "data_path": "action_result.parameter.row_number",
                    "data_type": "numeric",
                    "example_values": [
                        0
                    ]
                },
                {
                    "data_path": "action_result.parameter.row_values_as_list",
                    "data_type": "string",
                    "example_values": [
                        "[\"this\", \"is\", \"a\", \"test\"]"
                    ]
                },
                {
                    "data_path": "action_result.data.*.success",
                    "data_type": "boolean",
                    "example_values": [
                        true
                    ]
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string"
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)",
            "render": {
                "type": "json"
            }
        },
        {
            "action": "no op",
            "description": "Wait for the specified number of seconds",
            "type": "investigate",
            "identifier": "no_op",
            "read_only": true,
            "parameters": {
                "sleep_seconds": {
                    "description": "Sleep for this many seconds",
                    "data_type": "numeric",
                    "order": 0,
                    "required": true
                }
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "example_values": [
                        "success",
                        "failed"
                    ],
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.parameter.sleep_seconds",
                    "data_type": "numeric",
                    "example_values": [
                        15
                    ]
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Slept for 15 seconds"
                    ],
                    "column_name": "Message",
                    "column_order": 0
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)",
            "render": {
                "type": "table"
            },
            "lock": {
                "enabled": false
            }
        }
    ],
    "pip_dependencies": {
        "wheel": [
            {
                "module": "beautifulsoup4",
                "input_file": "wheels/py3/beautifulsoup4-4.9.1-py3-none-any.whl"
            },
            {
                "module": "python_magic",
                "input_file": "wheels/shared/python_magic-0.4.18-py2.py3-none-any.whl"
            },
            {
                "module": "soupsieve",
                "input_file": "wheels/py3/soupsieve-2.3.2.post1-py3-none-any.whl"
            }
        ]
    },
    "pip39_dependencies": {
        "wheel": [
            {
                "module": "beautifulsoup4",
                "input_file": "wheels/py3/beautifulsoup4-4.9.1-py3-none-any.whl"
            },
            {
                "module": "python_magic",
                "input_file": "wheels/shared/python_magic-0.4.18-py2.py3-none-any.whl"
            },
            {
                "module": "soupsieve",
                "input_file": "wheels/py3/soupsieve-2.5-py3-none-any.whl"
            }
        ]
    }
}
